# example_launch.yaml

launch:

# === Declare launch arguments ===
- arg:
    name: "ur_type"
    default: "ur5e"
    choice: [value: "ur3", value: "ur3e", value: "ur5", value: "ur5e", value: "ur10", value: "ur10e", value: "ur16e"]
    description: "Robot to use in the examples."
- arg:
    name: "example_type"
    description: "Selects special robot features, mounting, and environment for different examples."
    default: "basic"
    choice: [value: "basic", value: "soft_mount"]
- arg: 
    name: "safety_limits"
    default: "True"
    description: "If true, enable the safety limit controller."
- arg:
    name: "safety_pos_margin"
    default: "0.15"
    description: "The margin to the lower and upper limits in the safety controller."
- arg:
    name: "safety_k_position"
    default: "20"
    description: "k-position factor in the safety controller."
- arg: 
    name: "runtime_config_package"
    default: "ur_simulation_gazebo"
    description: "Package with the simulation controllers file specified in controllers_file"
- arg:
    name: "controllers_file"
    default: "ur_controllers.yaml"
    description: "YAML file in runtime_config_package in the config directory that contains the controllers configuration."
- arg:
    name: "prefix"
    default: ""
    description: "Prefix of the joint names, useful for multi-robot setup. Make sure to update the controllers' names if you change this."
- arg:
    name: "initial_joint_controller"
    default: "joint_trajectory_controller"
    description: "Controller to start and load from those defined in the controllers YAML."
- arg:
    name: "launch_rviz"
    default: "False"
    description: "If true, launch RViz."

# === Use subsitutions to set up parameters that need package lookups ===
- let:
    name: "joint_controller_defs"
    value: "$(find-pkg-share ur_simulation_gazebo)/config/$(var controllers_file)"
- let:
    name: "robot_xacro_path"
    value: "$(find-pkg-share ur_examples_gazebo_classic)/urdf/example_ur.urdf.xacro"
- let:
    name: "rviz_config_file"
    value: "$(find-pkg-share ur_description)/rviz/view_robot.rviz"

# TODO: see if $(find-exec xacro) works here

- let:
    name: "robot_description_content"
    value: "$(command 
      'xacro $(var robot_xacro_path) 
       name:=ur 
       ur_type:=$(var ur_type)
       safety_limits:=$(var safety_limits)
       safety_pos_margin:=$(var safety_pos_margin)
       safety_k_position:=$(var safety_k_position)
       prefix:=$(var prefix)
       sim_gazebo:=true
       simulation_controllers:=$(var joint_controller_defs)
       example_type:=$(var example_type)
       ')"

- node:
    name: "robot_state_publisher"
    pkg: "robot_state_publisher"
    exec: "robot_state_publisher"
    output: "both"
    # Like choice, param needs to be a list of dicts. 
    # This could be param: [{key: "value"}, ...] but preferred syntax seems to be:
    param:
      -
        name: "use_sim_time"
        value: True
      -
        name: "robot_description"
        value: "$(var robot_description_content)"

- node:
    name: "joint_state_broadcaster_spawner"
    pkg: "controller_manager"
    exec: "spawner"
    args: "joint_state_broadcaster -c /controller_manager" 

- node:
    name: "initial_joint_controller_spawner"
    pkg: "controller_manager"
    exec: "spawner"
    args: "$(var initial_joint_controller) -c /controller_manager"

- include:
    file: "$(find-pkg-share gazebo_ros)/launch/gazebo.launch.py"

- node:
    name: "gazebo_robot_spawner"
    pkg: "gazebo_ros"
    exec: "spawn_entity.py"
    args: "-entity ur -topic robot_description"
    output: "screen"

